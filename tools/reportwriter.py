# === ðŸ“¦ IMPORTS ===
from typing import Dict, List, Optional
from pydantic import BaseModel, Field
from langchain.tools import StructuredTool
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import LETTER
from reportlab.lib.utils import ImageReader
from langchain.chat_models import ChatOpenAI
import tempfile
import os
from dotenv import load_dotenv
import openai
from reportlab.lib.utils import simpleSplit

def wrap_text(text, font_name="Helvetica", font_size=11, max_width=500):
    return simpleSplit(text, font_name, font_size, max_width)


# Load API key from the environment file
load_dotenv("key.env")
key_string = os.getenv('OPEN_AI_API_KEY')
openai.api_key = key_string

class ReportWriterToolArgs(BaseModel):
    kpis: Dict[str, str] = Field(
        ..., description="Key performance indicators extracted from a company's 10-K filing"
    )
    graph_paths: List[str] = Field(
        ..., description="List of file paths to graph images (PNG or JPG)"
    )
    tone: Optional[str] = Field(
        None, description="Optional tone for the report, e.g., 'formal', 'concise'"
    )
    purpose: Optional[str] = Field(
        None, description="Optional purpose of the report, e.g., 'for internal use'"
    )
def report_writer_logic(
    kpis: Dict[str, str],
    graph_paths: List[str],
    tone: Optional[str] = None,
    purpose: Optional[str] = None
) -> str:
    from langchain.chat_models import ChatOpenAI
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import LETTER
    from reportlab.lib.utils import ImageReader
    import tempfile

    llm = ChatOpenAI(model="gpt-4o",temperature=0.4,openai_api_key=key_string)

    # Build KPI block
    kpi_text = "\n".join(f"- {k}: {v}" for k, v in kpis.items())

    # Final Prompt
    prompt = f"""You are a professional financial analyst tasked with creating a hedge fund investment report. Your report will be based on thorough financial analysis of KPIs extracted from a company's 10-K SEC filing. This report will be converted into a downloadable PDF using the PDF Report Generator tool. Make the report detailed depending on the user.

Please follow these steps to complete your task:

1. Analyze the provided financial KPIs to evaluate the company's performance.
2. Write a detailed hedge fundâ€“style investment report based on your findings.
3. Ensure your report is well-structured and formatted for PDF delivery.

Here is the financial data for the analysis:
<financial_kpis>
{kpi_text}
</financial_kpis>

{f"Use a {tone} tone in your writing." if tone else ""}
{f"This report is intended {purpose}." if purpose else ""}

Before writing the report, conduct your analysis inside <financial_analysis> tags. Cover the following:

1. Interpret the key KPIs provided.
2. Identify trends, fluctuations, and performance outliers.
3. Summarize the company's financial strengths and weaknesses.
4. Outline risks, opportunities, and provide a final financial health assessment.



Your final report should follow this structure:

1. Executive Summary  
2. Filing Highlights  
3. Financial Performance Analysis    
4. Conclusion

Be clear, data-driven, and insightful. When finished, your report will be passed to the PDF Report Generator tool. Begin your analysis and report writing now.
"""

    report_body = llm.predict(prompt)

    # Generate PDF
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        file_path = tmp.name
        c = canvas.Canvas(file_path, pagesize=LETTER)
        width, height = LETTER
        max_width = width - 100
        
        # Add header and footer functions
        def add_header(canvas, title):
            canvas.setFont("Helvetica-Bold", 16)
            canvas.drawString(40, height - 40, title)
            canvas.setFont("Helvetica", 8)
            canvas.drawString(40, height - 55, "FinAI Co-Pilot - Financial Analysis Report")
            canvas.line(40, height - 60, width - 40, height - 60)

        def add_footer(canvas, page_num):
            canvas.setFont("Helvetica", 8)
            canvas.drawString(40, 30, f"Page {page_num}")
            canvas.drawString(width - 100, 30, "Generated by FinAI Co-Pilot")
            canvas.line(40, 40, width - 40, 40)

        # Process the report content
        sections = report_body.split("\n\n")
        current_page = 1
        y_position = height - 80  # Start below header

        # Add title page
        add_header(c, "Financial Analysis Report")
        c.setFont("Helvetica-Bold", 14)
        c.drawString(40, height - 100, "Executive Summary")
        c.setFont("Helvetica", 11)
        
        # Process each section
        for section in sections:
            if y_position < 100:  # If we're too close to the bottom
                add_footer(c, current_page)
                c.showPage()
                current_page += 1
                add_header(c, "Financial Analysis Report")
                y_position = height - 80

            # Check if this is a section header
            if section.strip().endswith(":"):
                c.setFont("Helvetica-Bold", 12)
                y_position -= 20
            else:
                c.setFont("Helvetica", 11)

            # Split section into lines and add them
            lines = section.split("\n")
            for line in lines:
                if y_position < 100:
                    add_footer(c, current_page)
                    c.showPage()
                    current_page += 1
                    add_header(c, "Financial Analysis Report")
                    y_position = height - 80

                # Handle bullet points
                if line.strip().startswith("- "):
                    bullet_text = line[2:].strip()
                    wrapped_lines = wrap_text(bullet_text, font_name="Helvetica", font_size=11, max_width=width - 100)

                    for i, wrap_line in enumerate(wrapped_lines):
                        if y_position < 100:
                            add_footer(c, current_page)
                            c.showPage()
                            current_page += 1
                            add_header(c, "Financial Analysis Report")
                            y_position = height - 80

                        if i == 0:
                            c.drawString(50, y_position, "â€¢")
                            c.drawString(60, y_position, wrap_line)
                        else:
                            c.drawString(60, y_position, wrap_line)
                        y_position -= 15
                else:
                    wrapped_lines = wrap_text(line, font_name="Helvetica", font_size=11, max_width = max_width)
                    for wrap_line in wrapped_lines:
                        if y_position < 100:
                            add_footer(c, current_page)
                            c.showPage()
                            current_page += 1
                            add_header(c, "Financial Analysis Report")
                            y_position = height - 80
                        c.drawString(40, y_position, wrap_line)
                        y_position -= 15

                y_position -= 15

            y_position -= 10  # Add space between sections

        # Add graphs with proper spacing and captions
        for path in graph_paths:
            try:
                if y_position < 500:  # If we're too close to the bottom
                    add_footer(c, current_page)
                    c.showPage()
                    current_page += 1
                    add_header(c, "Financial Analysis Report")
                    y_position = height - 80

                img = ImageReader(path)
                iw, ih = img.getSize()
                aspect = ih / float(iw)
                w = width - 80
                h = w * aspect

                # Add graph caption
                
                caption = os.path.basename(path).replace("_", " ").replace(".png", "")
                c.drawString(40, y_position, f"Figure: {caption}")
                y_position -= 20

                # Draw the image
                c.drawImage(img, 40, y_position - h, width=w, height=h)
                y_position -= (h + 40)  # Add extra space after graph
            except Exception as e:
                print(f"Could not load image {path}: {e}")

        # Add final footer
        add_footer(c, current_page)
        c.save()

    return {file_path}

from langchain.tools import StructuredTool

ReportWriter_Tool = StructuredTool.from_function(
    func=report_writer_logic,
    name="ReportWriter_Tool",
    description="Generates a hedge fundâ€“style investment report from KPIs and graphs, then saves it as a PDF.",
    args_schema=ReportWriterToolArgs
)
